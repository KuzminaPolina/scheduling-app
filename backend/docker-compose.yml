version: '3.12'  # Определяет версию формата Docker Compose файла. В данном случае используется версия 3.12.

services:
  backend_scheduling: # Определяет сервис с именем "backend-scheduling".
    container_name: backend-scheduling  # Устанавливает своё имя для контейнера.
    restart: always  # Перезагрузка при возникновении критических ошибок в приложении
    build: .  # Указывает Docker Compose строить Docker образ из Dockerfile, который находится в текущей директории (обозначенной точкой).

    ports:
      # Пробрасывает порты между хост-машиной и контейнером.
      - "127.0.0.10:8888:8888"
      # Проброс порта 8888 на хост-машине на IP-адрес 127.0.0.10 в порт 8888 контейнера.
      # Это позволяет обращаться к приложению, работающему в контейнере, через хост-адрес 127.0.0.10 и порт 8888.

    env_file:
      # Указывает файл, содержащий переменные окружения, которые будут доступны контейнеру.
      - .env
      # Файл ".env" будет загружен, чтобы предоставить необходимые переменные окружения для контейнера.

    volumes:
      - .:/app # Определяет тома, которые будут монтироваться в контейнер.
      # Монтирует текущую директорию (обозначенную точкой) в директорию "/app" внутри контейнера.
      # Это позволяет контейнеру работать с файлами, которые находятся в текущей директории на хост-машине.

      - db-data:/app/api_fast_api/db_api
      # Монтирует том "db-data" в директорию "/app/api_fast_api/db_api" внутри контейнера.
      # Этот том будет использоваться для хранения данных базы данных, чтобы они сохранялись между перезапусками контейнера.

    command: [ "python", "run_fapi_docker.py" ]
    # Определяет команду, которая будет выполнена при запуске контейнера.
    # В данном случае запускается файл запуска приложения "run_fapi.py".

volumes:
  db-data:
    driver: local
    # Определяет том с именем "db-data".
    # Используется локальный драйвер для хранения данных на хост-машине.
    # Это позволяет данным сохраняться между перезапусками и пересозданиями контейнера.
