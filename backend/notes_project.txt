Для WINDOWS !!!!!!!!!!!!!!
Что бы запустить backend необходимо:
1 Установить виртуальное окружение с версией питона Python 3.12
- У меня это папка .venv (Так я просто указал при создании виртуального окружения)

2 Запустить виртуальное окружение.
- Открываем окно терминала (командная строка) в папке где у вас установлено виртуальное окружение
(В проводнике открываем папку с вирт. окружением у меня .venv
кликаем правой кнопкой мышки на пустом месте в папке .venv и выбираем из контекстного окна - "Открыть в терминале")
- Вводим команду:
cd Scripts
- Вводим команду: (да просто одно слово)
activate

3 Запустится виртуальное окружение
Примерно это будет выглядеть так:
(.venv) PS C:\scheduling-app\backend>
Важно что бы вы увидели в самом начале командной строки, (что-то в скобках)
У меня это (.venv) У вас может быть ваше название папки куда или где вы создавали виртуальное окружение.

4 Теперь нужно установить в наше чистое виртуальное окружение зависимости которые необходимы для нашего бекенда.
- В терминале когда запущено наше виртуальное окружение нужно зайти в папку там где лежит файл с зависимостями - backend/requirements.txt
- Находясь в папке backend нужно запустить команду установки необходимых зависимостей:
- Вводим команду:
pip install -r requirements.txt

5 Ждем пока все установится, желательно это делать каждый раз когда обновляли репозиторий.

6 Теперь можем запустить проект:
Напомню виртуальное окружение все это время активно (запущено).
Нужно находится в папке backend
- Вводим команду: (пример как это выглядит (.venv) PS C:\scheduling-app\backend> python run_fapi.py)

python run_fapi.py

7 В терминале увидим что-то похожее на такое:

(.venv) PS C:\scheduling-app\backend> python run_fapi.py
Структура проекта успешно сохранена в файле.
База данных уже существует.
INFO:     Started server process [11752]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.10:8888 (Press CTRL+C to quit)

8 Что бы остановить приложение нажимаем в терминале Ctrl+C
----------------------------------------

----------------------------------------
Адрес админ-панели(html): http://127.0.0.10:8888/admin
Регистрация(html): http://127.0.0.10:8888/registration
Авторизация(html): http://127.0.0.10:8888/login
Страница документации по ендпоинтам(html): http://127.0.0.10:8888/docs
----------------------------------------
Endpoints:
Страница документации эндпоинтов с подробным описанием
http://127.0.0.10:8888/docs

Регистрация пользователя (отключена в документации)
http://127.0.0.10:8888/api_admin/registration

Авторизация пользователя по логину, почте, паролю (получение токена для доступа)
http://127.0.0.10:8888/api_admin/authorization

Маршрут авторизации в админ панели бека (внутренняя админка бека)
http://127.0.0.10:8888/api_admin/login

# Маршрут получение списка ДАТ и статуса уроков на запрашиваемый месяц.
Для бекенда (админпанели)
http://127.0.0.10:8888/api_admin/lesson_dates_for_the_month_backend/{date_in}
Для фронта (админпанели)
http://127.0.0.10:8888/api_admin/lesson_dates_for_the_month_frontend/{date_in}

Маршрут получения занятий на запрашиваемый месяц.
Возвращает список занятий с полными данными о клиенте и занятиях
http://127.0.0.10:8888/api_admin/get_lessons_for_a_month/{date_y_m_d}

Маршрут для удаления записи об уроке из БД
http://127.0.0.10:8888/api_admin/delete-lesson_frontend/{lesson_id}

Маршрут для изменения данных в записи урока
http://127.0.0.10:8888/api_admin/change-lesson-data/{lesson_id}
!! Смотреть документацию этого ендпоинта. (как менять поля по выбору)

----------------------------------------
Добавлена регистрация в админке.
Добавлена защита auth2.0 маршрутов api (отключена, находится на этапе разработки)

Добавлена авторизация в админке. (внутренняя админка бека)
Добавлен выход с сессии админа. (внутренняя админка бека)
----------------------------------------

----------------------------------------
Для теста:
Запуск тестового сервера с адресом который допускает CORS
.env -есть список разрешенных адресов
python -m http.server 5000 --bind 127.0.0.50
----------------------------------------
----------------------------------------

Обновление файла с зависимостями:
--> pip freeze > requirements.txt
Установка модулей из файла с зависимостями
--> pip install -r requirements.txt
----------------------------------------
Запустить фронт реакта:
перейти в папку фронтенда frontend
npm run dev

---------------------------------------- 2024-06-03
Добавлены пользователи с доступом.
admin@admin.admin
front@front.front

Получить токен : http://адрес_бека/api_admin/authorization
{
    username: admin@admin.admin,
    mail: admin@admin.admin,
    password: admin@admin.admin,
}

Получим в ответ примерно:
{
  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmcm9udEBmcm9udC5mcm9udCIsImV4cCI6MTcxNzQzNDA2M30.F05xtGoPaBwRkzBXlb67thgYpyyTT2TcyqWjTPEAAUE",
  "token_type": "bearer"
}
Пояснение:
В заголовке Authorization важно, чтобы схема аутентификации (метод шифрования) была написана с заглавной буквы.
Это относится как к Basic, так и к Bearer.
Стандарт требует, чтобы схема аутентификации была написана с заглавной буквы, так как это часть соглашения о формате заголовков HTTP.
Добавляем это в заголовок что бы получилось примерно так:
Authorization: Bearer sometoken.blablabla
----------------------------------------
